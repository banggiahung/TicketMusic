@model List<TicketMusic.Models.Categories>
@{
    var count = 1;
}


<div id="vue_category">
    <h2 class="text-center mb-4">Quản lý danh mục</h2>
    <div class="p-3">
        <button type="button" class="btn btn-success p-2" data-bs-toggle="modal" data-bs-target="#addModal">
            Thêm danh mục
        </button>
    </div>
    <div>
        <table id="table_category" class="table table-bordered">
            <thead>
                <tr>
                    <th>STT</th>
                    <th>Tên danh mục</th>
                    <th>Slug</th>
                    <th>Trạng thái</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var items in Model)
                {
                    <tr>
                        <td>@(count++)</td>
                        <td>@items.CategoryName</td>
                        <td>@items.Slug</td>
                        <td>
                            @if (items.IsDefault)
                            {
                                <button class="btn btn-success">Mặc định</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-info" v-on:click="handleDefault(@items.CategoryID)">Không mặc định</button>

                            }

                                
                                

                            
                        </td>
                        <td style="width: fit-content">
                            <a href="/admin/categories/edit/@items.CategoryID" class="btn btn-warning">Sửa </a>
                            <button type="button" class="btn btn-danger" v-on:click="getItemsByIdDelete(@items.CategoryID)">Xóa</button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-lg ">
            <div class="modal-content ">
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">Thêm mới</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Tên danh mục </label>
                                <input class="form-control" type="text" placeholder="Tên danh mục" id="CategoryName">
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <input class="form-control" type="text" id="Slug" placeholder="Slug được tạo tự động" />
                            </div>
                           
                        </div>
                        
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="saveButton" v-on:click="addCategory">Lưu</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/config/datatableconfig.js"></script>
<script>
    var vue_category = new Vue({
        el: "#vue_category",
        data:{

        },
        methods:{
            async addCategory() {
                if ($("#CategoryName").val() == "") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Vui lòng nhập tên',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
              
                $('#preloader').fadeIn();
                try {
                    const formData = new FormData();
                    formData.append('CategoryName', $("#CategoryName").val());
                    formData.append('Slug', $("#Slug").val());
                   
                    await axios.post('/admin/categories/add', formData,
                        {
                            headers: {
                                'Content-Type': 'multipart/form-data'
                            }
                        }).then(res => {
                            if (res.data.code === 200) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công',
                                    text: 'Đã lưu thành công',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.reload();

                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Lỗi',
                                    text: `${res.data.message}`,
                                    confirmButtonText: 'OK'
                                });
                                return;

                            }

                        }).finally(() => {
                            $('#preloader').fadeOut();
                        });

                } catch (error) {
                    $('#preloader').fadeOut();

                    console.error(error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Đã có lỗi xảy ra',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    });

                }
            },
            getItemsByIdDelete(Id) {
                Swal.fire({
                    title: 'Xóa danh mục',
                    text: 'Bạn có chắc chắn muốn xóa',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Không!!!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const formData = new FormData();
                        formData.append('ID', Id);
                        axios.post('/admin/categories/remove', formData, {
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        }).then(response => {
                            if (response.data.code == 200) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công',
                                    text: 'Đã thành công',
                                    confirmButtonText: 'OK',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.reload();

                                    }
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Lỗi',
                                    text: `${res.data.message}`,
                                    confirmButtonText: 'OK'
                                });
                                return;
                            }


                        }).catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi',
                                text: 'Đã có lỗi xảy ra vui lòng thử lại',
                                confirmButtonText: 'OK'
                            });
                            return;

                        });
                    } else {
                        return;
                    }
                });
            },
            handleDefault(ID) {
                try {
                    const formData = new FormData();
                    formData.append('ID', ID);
                    axios.post('/admin/categories/change-default', formData, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }

                    }).then(res => {
                        if (res.data.code == 200) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Thành công',
                                text: 'Đã thành công',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.reload();
                                }
                            });
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Cảnh báo',
                                text: `${res.data.message}`,
                                confirmButtonText: 'OK'
                            });
                            return;
                        }
                    })

                } catch {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Lỗi',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    });
                }
            }
        }
    });
    $(document).ready(function () {
        $('#table_category').DataTable({
            ...globalConfig.createDataTableConfig(),
            'columnDefs': [{
                'targets': [-1],
                'orderable': false,
            }],
            searching: true,
            iDisplayLength: 7,
            "ordering": false,
            lengthChange: false,
            aaSorting: [[0, "desc"]],
            aLengthMenu: [
                [5, 10, 25, 50, 100, -1],

                ["5 dòng", "10 dòng", "25 dòng", "50 dòng", "100 dòng", "Tất cả"],
            ]
        });

        function convertToSlug(text) {
            let str = text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

            // Các thay thế cho ký tự tiếng Việt
            const replacements = {
                "đ": "d",
                "Đ": "D"
            };

            // Thực hiện thay thế cho các ký tự tiếng Việt
            for (let key in replacements) {
                str = str.replace(new RegExp(key, 'g'), replacements[key]);
            }

            // Chuyển đổi thành slug
            return str
                .toLowerCase()
                .replace(/ /g, '-')
                .replace(/[^\w-]+/g, '');
        }

        $('#CategoryName').on('input', function () {

            var name = $(this).val();

            $('#Slug').val(convertToSlug(name));
        });
    })
</script>